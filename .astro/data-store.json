[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.7.13","content-config-digest","e4801200a42515c9","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://shealeslein.com\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-light\",\"themes\":{},\"wrap\":true,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false},\"legacy\":{\"collections\":false}}","posts",["Map",11,12,33,34,54,55],"jest-naming-conventions",{"id":11,"data":13,"body":19,"filePath":20,"digest":21,"rendered":22,"legacyId":32},{"title":14,"description":15,"date":16,"tags":17},"Jest Testing Conventions","My opinions of conventions teams should adopt when using Jest.",["Date","2020-03-26T00:00:00.000Z"],[18],"programming","Over the last several months our frontend development team has grown. As a result, I am spending more time on code reviews. I found I was providing similar feedback about unit tests to different members of the team. On multiple occasions, I have said, \"You know I should probably write this stuff down. Then we can link to it future reviews. It will save me some keystrokes and conversations.\" After dragging my feet for a few days, I finally posted some of my expectations on GitHub. You can see them here: [Jest Testing Conventions](https://github.com/sleslein/vscode/blob/master/jest-testing-conventions.md) \n\nThe goal of these is not to dictate every jot and tittle, but rather provide loose guidelines that will provide a consistent look and feel to the test code. Experience has taught me the consistency conventions offer can be a [force multipliers](https://ardalis.com/becoming-a-developer-team-force-multiplier/) on development teams.","src/content/posts/jest-naming-conventions.md","3d600597228d8932",{"html":23,"metadata":24},"\u003Cp>Over the last several months our frontend development team has grown. As a result, I am spending more time on code reviews. I found I was providing similar feedback about unit tests to different members of the team. On multiple occasions, I have said, “You know I should probably write this stuff down. Then we can link to it future reviews. It will save me some keystrokes and conversations.” After dragging my feet for a few days, I finally posted some of my expectations on GitHub. You can see them here: \u003Ca href=\"https://github.com/sleslein/vscode/blob/master/jest-testing-conventions.md\">Jest Testing Conventions\u003C/a>\u003C/p>\n\u003Cp>The goal of these is not to dictate every jot and tittle, but rather provide loose guidelines that will provide a consistent look and feel to the test code. Experience has taught me the consistency conventions offer can be a \u003Ca href=\"https://ardalis.com/becoming-a-developer-team-force-multiplier/\">force multipliers\u003C/a> on development teams.\u003C/p>",{"headings":25,"localImagePaths":26,"remoteImagePaths":27,"frontmatter":28,"imagePaths":31},[],[],[],{"title":14,"description":15,"date":29,"tags":30},["Date","2020-03-26T00:00:00.000Z"],[18],[],"jest-naming-conventions.md","to-kill-a-process",{"id":33,"data":35,"body":40,"filePath":41,"digest":42,"rendered":43,"legacyId":53},{"title":36,"description":37,"date":38,"tags":39},"How to Kill a Process Listening on a Port","A simple function for killing processes listening to a specific port.",["Date","2020-04-22T00:00:00.000Z"],[18],"As a front-end web developer I'm constantly starting and stopping my local webpack dev server. Starting the server is as easy as `yarn start`. Node starts up, and I'm off to the races. Stopping is easy too, `ctrl + c`. Well, stopping is easy so long as I have the terminal I started the process available. When I don't, I need to find the process that is listening to the port and close it.  \n\nWhat's a developer to do? Head to [Duck Duck Go](https://duckduckgo.com/) and search for \"find a process listening to port on mac\". Well, this has happened several times over the last couple of weeks. Each time I went to [the same article](https://tips.tutorialhorizon.com/2017/08/30/find-the-process-running-on-a-port-on-your-mac/) which gave me the following command: \n\n`lsof -n -i4TCP:8080 | grep LISTEN | awk '{print $2}' | xargs kill -9`\n\nEasy peasy! Update my port number.  Press enter.  The process is terminated and I'm back in business.\n\nThis works great! However, I have some problems with this. I'm lazy. I cannot remember this whole command. Honestly, I don't want to either. So, I added the following function to my `.zshrc` file.  \n\n```\n# kill_port_proc \u003Cport>\nfunction kill_port_proc {\n    readonly PORT=${1:?\"The port must be specified.\"}\n    PID=$(lsof -i tcp:\"$PORT\" | grep LISTEN | awk '{print $2}')\n\n    if [ ! -z $PID ]\n    then\n      # if the PID exists, kill it\n      kill -9 ${PID}\n      echo \"Killed ${PID}\"\n    else\n      # if it does not, displa this message\n      echo \"Nothing listening to port ${PORT}\"\n    fi\n}\n```\n\nThis function performs the same commands recommend in the article.  It even tells me if no process exists. Now the next time I see the dreaded `Error: listen EADDRINUSE: address already in use 0.0.0.0:5555` message in my terminal because an old node process is already running, I don't need to search the web.  I can simply run this command, `kill_port_proc 5555`","src/content/posts/to-kill-a-process.md","9ab46c74f9ae74eb",{"html":44,"metadata":45},"\u003Cp>As a front-end web developer I’m constantly starting and stopping my local webpack dev server. Starting the server is as easy as \u003Ccode>yarn start\u003C/code>. Node starts up, and I’m off to the races. Stopping is easy too, \u003Ccode>ctrl + c\u003C/code>. Well, stopping is easy so long as I have the terminal I started the process available. When I don’t, I need to find the process that is listening to the port and close it.\u003C/p>\n\u003Cp>What’s a developer to do? Head to \u003Ca href=\"https://duckduckgo.com/\">Duck Duck Go\u003C/a> and search for “find a process listening to port on mac”. Well, this has happened several times over the last couple of weeks. Each time I went to \u003Ca href=\"https://tips.tutorialhorizon.com/2017/08/30/find-the-process-running-on-a-port-on-your-mac/\">the same article\u003C/a> which gave me the following command:\u003C/p>\n\u003Cp>\u003Ccode>lsof -n -i4TCP:8080 | grep LISTEN | awk '{print $2}' | xargs kill -9\u003C/code>\u003C/p>\n\u003Cp>Easy peasy! Update my port number.  Press enter.  The process is terminated and I’m back in business.\u003C/p>\n\u003Cp>This works great! However, I have some problems with this. I’m lazy. I cannot remember this whole command. Honestly, I don’t want to either. So, I added the following function to my \u003Ccode>.zshrc\u003C/code> file.\u003C/p>\n\u003Cpre class=\"astro-code github-light\" style=\"background-color:#fff;color:#24292e; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan># kill_port_proc &#x3C;port>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>function kill_port_proc {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    readonly PORT=${1:?\"The port must be specified.\"}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    PID=$(lsof -i tcp:\"$PORT\" | grep LISTEN | awk '{print $2}')\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    if [ ! -z $PID ]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    then\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>      # if the PID exists, kill it\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>      kill -9 ${PID}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>      echo \"Killed ${PID}\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    else\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>      # if it does not, displa this message\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>      echo \"Nothing listening to port ${PORT}\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    fi\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This function performs the same commands recommend in the article.  It even tells me if no process exists. Now the next time I see the dreaded \u003Ccode>Error: listen EADDRINUSE: address already in use 0.0.0.0:5555\u003C/code> message in my terminal because an old node process is already running, I don’t need to search the web.  I can simply run this command, \u003Ccode>kill_port_proc 5555\u003C/code>\u003C/p>",{"headings":46,"localImagePaths":47,"remoteImagePaths":48,"frontmatter":49,"imagePaths":52},[],[],[],{"title":36,"description":37,"date":50,"tags":51},["Date","2020-04-22T00:00:00.000Z"],[18],[],"to-kill-a-process.md","git-alias",{"id":54,"data":56,"body":61,"filePath":62,"digest":63,"rendered":64,"legacyId":74},{"title":57,"description":58,"date":59,"tags":60},"Creating a git alias to trigger a rebuild","See how to create git aliases can improve your productivity.",["Date","2022-02-15T00:00:00.000Z"],[18],"Confession time.  For quite a while I've been making meaningless manual changes in my PR's during when CI processes fail due to test flake.  Recently, however, a new member of the team enlightened me.  You can create empty commits in git by adding the `--allow-empty` flag to commit.  This is certainly a huge productivity benefit.  This week the test flake has gotten real, but I don't have time to deal with that.  Manually typing out a commit and push is feeling like such a burden.\n\n```sh\n> git commit --allow-empty -m \"trigger rebuild\"\n> git push\n```\nSo much work!  Thankfully, today I learned about git aliases and now I can simply run `git rebuild`.  Much better!  Here's how to do it.\n\nFirst, open the `.gitconfig` file with your favorite text editor.  Most likely this is in your home directory.  If you're using macOS, open Finder and navigate to the `Users/[yourUserName]` directory.  The file may be hidden.  If you don't see it then press `shift + cmd + .`.  \n\nAfter the file is open in your text editor add an alias section and your command and save the file.  The result should look like this:\n\n```\n[alias]\n  rebuild = !git commit --allow-empty -m 'trigger rebuild' && git push\n```\n\nTry it out!  You can open your terminal, and run a simple `git rebuild` command to create and push your empty commit.\n\nThis opens up a whole world of new possibilities to explore! It's easy to envision many ways to create new simple shortcuts.  Even small thing small like creating a shortcut checkout a branch with a `git co` command instead of `git checkout` offers some nice developer experience improvements.","src/content/posts/git-alias.md","3a5d37a56ca5d92e",{"html":65,"metadata":66},"\u003Cp>Confession time.  For quite a while I’ve been making meaningless manual changes in my PR’s during when CI processes fail due to test flake.  Recently, however, a new member of the team enlightened me.  You can create empty commits in git by adding the \u003Ccode>--allow-empty\u003C/code> flag to commit.  This is certainly a huge productivity benefit.  This week the test flake has gotten real, but I don’t have time to deal with that.  Manually typing out a commit and push is feeling like such a burden.\u003C/p>\n\u003Cpre class=\"astro-code github-light\" style=\"background-color:#fff;color:#24292e; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"sh\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49\">>\u003C/span>\u003Cspan style=\"color:#24292E\"> git commit --allow-empty -m \u003C/span>\u003Cspan style=\"color:#032F62\">\"trigger rebuild\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49\">>\u003C/span>\u003Cspan style=\"color:#24292E\"> git push\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>So much work!  Thankfully, today I learned about git aliases and now I can simply run \u003Ccode>git rebuild\u003C/code>.  Much better!  Here’s how to do it.\u003C/p>\n\u003Cp>First, open the \u003Ccode>.gitconfig\u003C/code> file with your favorite text editor.  Most likely this is in your home directory.  If you’re using macOS, open Finder and navigate to the \u003Ccode>Users/[yourUserName]\u003C/code> directory.  The file may be hidden.  If you don’t see it then press \u003Ccode>shift + cmd + .\u003C/code>.\u003C/p>\n\u003Cp>After the file is open in your text editor add an alias section and your command and save the file.  The result should look like this:\u003C/p>\n\u003Cpre class=\"astro-code github-light\" style=\"background-color:#fff;color:#24292e; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>[alias]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  rebuild = !git commit --allow-empty -m 'trigger rebuild' &#x26;&#x26; git push\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Try it out!  You can open your terminal, and run a simple \u003Ccode>git rebuild\u003C/code> command to create and push your empty commit.\u003C/p>\n\u003Cp>This opens up a whole world of new possibilities to explore! It’s easy to envision many ways to create new simple shortcuts.  Even small thing small like creating a shortcut checkout a branch with a \u003Ccode>git co\u003C/code> command instead of \u003Ccode>git checkout\u003C/code> offers some nice developer experience improvements.\u003C/p>",{"headings":67,"localImagePaths":68,"remoteImagePaths":69,"frontmatter":70,"imagePaths":73},[],[],[],{"title":57,"description":58,"date":71,"tags":72},["Date","2022-02-15T00:00:00.000Z"],[18],[],"git-alias.md"]